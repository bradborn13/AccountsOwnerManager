{"version":3,"sources":["store/WeatherForecasts.ts","store/index.ts","store/Counter.ts","components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Counter.tsx","components/FetchData.tsx","registerServiceWorker.ts","index.tsx","store/configureStore.ts","App.tsx"],"names":["actionCreators","requestWeatherForecasts","startDateIndex","dispatch","getState","appState","weatherForecasts","fetch","then","response","json","data","type","forecasts","unloadedState","isLoading","reducers","counter","state","incomingAction","undefined","count","action","NavMenu","isOpen","toggle","_this","setState","react","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","this","Collapse","navbar","NavItem","NavLink","React","Layout","props","NavMenu_NavMenu","children","connect","href","Counter","aria-live","increment","decrement","FetchData","ensureDataFetched","id","renderForecastsTable","renderPagination","parseInt","match","params","aria-labelledby","map","forecast","key","date","temperatureC","temperatureF","summary","prevStartDateIndex","nextStartDateIndex","concat","WeatherForecastsStore","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","history","createBrowserHistory","basename","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","Object","objectSpread","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","apply","applyMiddleware","configureStore","ReactDOM","es","esm","Route","exact","path","component","Home","getElementById","URL","process","toString","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4b7cea3c.chunk.js","sourcesContent":["import { Action, Reducer } from 'redux';\r\nimport { AppThunkAction } from './';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface WeatherForecastsState {\r\n    isLoading: boolean;\r\n    startDateIndex?: number;\r\n    forecasts: WeatherForecast[];\r\n}\r\n\r\nexport interface WeatherForecast {\r\n    date: string;\r\n    temperatureC: number;\r\n    temperatureF: number;\r\n    summary: string;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n\r\ninterface RequestWeatherForecastsAction {\r\n    type: 'REQUEST_WEATHER_FORECASTS';\r\n    startDateIndex: number;\r\n}\r\n\r\ninterface ReceiveWeatherForecastsAction {\r\n    type: 'RECEIVE_WEATHER_FORECASTS';\r\n    startDateIndex: number;\r\n    forecasts: WeatherForecast[];\r\n}\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\ntype KnownAction = RequestWeatherForecastsAction | ReceiveWeatherForecastsAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    requestWeatherForecasts: (startDateIndex: number): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        // Only load data if it's something we don't already have (and are not already loading)\r\n        const appState = getState();\r\n        if (appState && appState.weatherForecasts && startDateIndex !== appState.weatherForecasts.startDateIndex) {\r\n            fetch(`weatherforecast`)\r\n                .then(response => response.json() as Promise<WeatherForecast[]>)\r\n                .then(data => {\r\n                    dispatch({ type: 'RECEIVE_WEATHER_FORECASTS', startDateIndex: startDateIndex, forecasts: data });\r\n                });\r\n\r\n            dispatch({ type: 'REQUEST_WEATHER_FORECASTS', startDateIndex: startDateIndex });\r\n        }\r\n    }\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nconst unloadedState: WeatherForecastsState = { forecasts: [], isLoading: false };\r\n\r\nexport const reducer: Reducer<WeatherForecastsState> = (state: WeatherForecastsState | undefined, incomingAction: Action): WeatherForecastsState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'REQUEST_WEATHER_FORECASTS':\r\n            return {\r\n                startDateIndex: action.startDateIndex,\r\n                forecasts: state.forecasts,\r\n                isLoading: true\r\n            };\r\n        case 'RECEIVE_WEATHER_FORECASTS':\r\n            // Only accept the incoming data if it matches the most recent request. This ensures we correctly\r\n            // handle out-of-order responses.\r\n            if (action.startDateIndex === state.startDateIndex) {\r\n                return {\r\n                    startDateIndex: action.startDateIndex,\r\n                    forecasts: action.forecasts,\r\n                    isLoading: false\r\n                };\r\n            }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n};\r\n","import * as WeatherForecasts from './WeatherForecasts';\r\nimport * as Counter from './Counter';\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n    counter: Counter.CounterState | undefined;\r\n    weatherForecasts: WeatherForecasts.WeatherForecastsState | undefined;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    counter: Counter.reducer,\r\n    weatherForecasts: WeatherForecasts.reducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface CounterState {\r\n    count: number;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\r\n\r\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\r\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\nexport type KnownAction = IncrementCountAction | DecrementCountAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    increment: () => ({ type: 'INCREMENT_COUNT' } as IncrementCountAction),\r\n    decrement: () => ({ type: 'DECREMENT_COUNT' } as DecrementCountAction)\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nexport const reducer: Reducer<CounterState> = (state: CounterState | undefined, incomingAction: Action): CounterState => {\r\n    if (state === undefined) {\r\n        return { count: 0 };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'INCREMENT_COUNT':\r\n            return { count: state.count + 1 };\r\n        case 'DECREMENT_COUNT':\r\n            return { count: state.count - 1 };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as React from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\r\n    public state = {\r\n        isOpen: false\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">WebApplication1</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\"/>\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={this.state.isOpen} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n                                </NavItem>\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport NavMenu from './NavMenu';\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>\r\n        <NavMenu/>\r\n        <Container>\r\n            {props.children}\r\n        </Container>\r\n    </React.Fragment>\r\n);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Hello, world!</h1>\r\n    <p>Welcome to your new single-page application, built with:</p>\r\n    <ul>\r\n      <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n      <li><a href='https://facebook.github.io/react/'>React</a> and <a href='https://redux.js.org/'>Redux</a> for client-side code</li>\r\n      <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n    </ul>\r\n    <p>To help you get started, we've also set up:</p>\r\n    <ul>\r\n      <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n      <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n      <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n    </ul>\r\n    <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n  </div>\r\n);\r\n\r\nexport default connect()(Home);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../store';\r\nimport * as CounterStore from '../store/Counter';\r\n\r\ntype CounterProps =\r\n    CounterStore.CounterState &\r\n    typeof CounterStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\nclass Counter extends React.PureComponent<CounterProps> {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Counter</h1>\r\n\r\n                <p>This is a simple example of a React component.</p>\r\n\r\n                <p aria-live=\"polite\">Current count: <strong>{this.props.count}</strong></p>\r\n\r\n                <button type=\"button\"\r\n                    className=\"btn btn-primary btn-lg\"\r\n                    onClick={() => { this.props.increment(); }}>\r\n                    Increment\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.counter,\r\n    CounterStore.actionCreators\r\n)(Counter);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { ApplicationState } from '../store';\r\nimport * as WeatherForecastsStore from '../store/WeatherForecasts';\r\n\r\n// At runtime, Redux will merge together...\r\ntype WeatherForecastProps =\r\n  WeatherForecastsStore.WeatherForecastsState // ... state we've requested from the Redux store\r\n  & typeof WeatherForecastsStore.actionCreators // ... plus action creators we've requested\r\n  & RouteComponentProps<{ startDateIndex: string }>; // ... plus incoming routing parameters\r\n\r\n\r\nclass FetchData extends React.PureComponent<WeatherForecastProps> {\r\n  // This method is called when the component is first added to the document\r\n  public componentDidMount() {\r\n    this.ensureDataFetched();\r\n  }\r\n\r\n  // This method is called when the route parameters change\r\n  public componentDidUpdate() {\r\n    this.ensureDataFetched();\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 id=\"tabelLabel\">Weather forecast</h1>\r\n        <p>This component demonstrates fetching data from the server and working with URL parameters.</p>\r\n        {this.renderForecastsTable()}\r\n        {this.renderPagination()}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  private ensureDataFetched() {\r\n    const startDateIndex = parseInt(this.props.match.params.startDateIndex, 10) || 0;\r\n    this.props.requestWeatherForecasts(startDateIndex);\r\n  }\r\n\r\n  private renderForecastsTable() {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.forecasts.map((forecast: WeatherForecastsStore.WeatherForecast) =>\r\n            <tr key={forecast.date}>\r\n              <td>{forecast.date}</td>\r\n              <td>{forecast.temperatureC}</td>\r\n              <td>{forecast.temperatureF}</td>\r\n              <td>{forecast.summary}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  private renderPagination() {\r\n    const prevStartDateIndex = (this.props.startDateIndex || 0) - 5;\r\n    const nextStartDateIndex = (this.props.startDateIndex || 0) + 5;\r\n\r\n    return (\r\n      <div className=\"d-flex justify-content-between\">\r\n        <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${prevStartDateIndex}`}>Previous</Link>\r\n        {this.props.isLoading && <span>Loading...</span>}\r\n        <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${nextStartDateIndex}`}>Next</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state: ApplicationState) => state.weatherForecasts, // Selects which state properties are merged into the component's props\r\n  WeatherForecastsStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(FetchData as any);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any;\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport Layout from './components/Layout';\r\nimport Home from './components/Home';\r\nimport Counter from './components/Counter';\r\nimport FetchData from './components/FetchData';\r\n\r\nimport './custom.css'\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/counter' component={Counter} />\r\n        <Route path='/fetch-data/:startDateIndex?' component={FetchData} />\r\n    </Layout>\r\n);\r\n"],"sourceRoot":""}